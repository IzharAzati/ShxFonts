

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Azati.Shx.Data\App.config"
//     Connection String Name: "ShxConnStrings"
//     Connection String:      "Data Source=.;Initial Catalog=ShpShxFonts;Integrated Security=True;Application Name=Azati.Shx"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 15.0.4033.1

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Azati.Shx.Data
{

    #region Unit of work

    public interface IFontsDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<LoadDirectory> LoadDirectories { get; set; } // LoadDirectory
        System.Data.Entity.DbSet<ShxFontDef> ShxFontDefs { get; set; } // ShxFontDef
        System.Data.Entity.DbSet<ShxFontFile> ShxFontFiles { get; set; } // ShxFontFiles

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public class FontsDbContext : System.Data.Entity.DbContext, IFontsDbContext
    {
        public System.Data.Entity.DbSet<LoadDirectory> LoadDirectories { get; set; } // LoadDirectory
        public System.Data.Entity.DbSet<ShxFontDef> ShxFontDefs { get; set; } // ShxFontDef
        public System.Data.Entity.DbSet<ShxFontFile> ShxFontFiles { get; set; } // ShxFontFiles

        static FontsDbContext()
        {
            System.Data.Entity.Database.SetInitializer<FontsDbContext>(null);
        }

        public FontsDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public FontsDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public FontsDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public FontsDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        public FontsDbContext(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new LoadDirectoryConfiguration());
            modelBuilder.Configurations.Add(new ShxFontDefConfiguration());
            modelBuilder.Configurations.Add(new ShxFontFileConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new LoadDirectoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ShxFontDefConfiguration(schema));
            modelBuilder.Configurations.Add(new ShxFontFileConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region POCO classes

    // LoadDirectory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public class LoadDirectory
    {
        public int Id { get; set; } // Id (Primary key)
        public string ComputerName { get; set; } // ComputerName (length: 260)
        public string FullPath { get; set; } // FullPath (length: 260)
        public System.DateTime FirstScanDate { get; set; } // FirstScanDate
        public System.DateTime LastScanDate { get; set; } // LastScanDate
        public byte[] MyRowVersion { get; set; } // MyRowVersion (length: 8)

        // Reverse navigation

        /// <summary>
        /// Child ShxFontFiles where [ShxFontFiles].[LoadDirectoryId] point to this entity (FK__ShxFontFi__LoadD__534D60F1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ShxFontFile> ShxFontFiles { get; set; } // ShxFontFiles.FK__ShxFontFi__LoadD__534D60F1

        public LoadDirectory()
        {
            ComputerName = "NUL";
            FullPath = "NUL";
            FirstScanDate = System.DateTime.Now;
            LastScanDate = System.DateTime.Now;
            ShxFontFiles = new System.Collections.Generic.List<ShxFontFile>();
        }
    }

    // ShxFontDef
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public class ShxFontDef
    {
        public int Id { get; set; } // Id (Primary key)
        public int ShxFontFileId { get; set; } // ShxFontFileId
        public int ShapeNumber { get; set; } // ShapeNumber
        public string ShapeHex { get; private set; } // ShapeHex (length: 4000)
        public short DefBytes { get; set; } // DefBytes
        public string ShapeName { get; set; } // ShapeName (length: 130)
        public short ShapeLine { get; set; } // ShapeLine

        // Foreign keys

        /// <summary>
        /// Parent ShxFontFile pointed by [ShxFontDef].([ShxFontFileId]) (FK_ShxFontDef_ShxFontFiles)
        /// </summary>
        public virtual ShxFontFile ShxFontFile { get; set; } // FK_ShxFontDef_ShxFontFiles

        public ShxFontDef()
        {
            ShapeNumber = 0;
            DefBytes = 0;
            ShapeLine = 0;
        }
    }

    // ShxFontFiles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public class ShxFontFile
    {
        public int Id { get; set; } // Id (Primary key)
        public int LoadDirectoryId { get; set; } // LoadDirectoryId
        public string ShxFileName { get; set; } // ShxFileName (length: 260)
        public int ShxFileSize { get; set; } // ShxFileSize
        public System.DateTime ShxFileDate { get; set; } // ShxFileDate
        public string Crc32 { get; set; } // Crc32 (length: 10)
        public string ShxType { get; set; } // ShxType (length: 50)
        public string FontName { get; set; } // FontName (length: 130)
        public string HeaderRemarks { get; set; } // HeaderRemarks
        public string HeaderBigFont { get; set; } // HeaderBigFont (length: 130)
        public string HeaderLine1 { get; set; } // HeaderLine1 (length: 130)
        public string HeaderLine2 { get; set; } // HeaderLine2 (length: 130)

        ///<summary>
        /// The above value specifies the number of vector lengths above the baseline that the uppercase letters extend, and below indicates how far the lowercase letters descend below the baseline. The baseline is similar in concept to the lines on writing paper. These values define the basic character size and are used as scale factors for the height specified for the text object.
        ///</summary>
        public short? Above { get; set; } // Above

        ///<summary>
        /// The above value specifies the number of vector lengths above the baseline that the uppercase letters extend, and below indicates how far the lowercase letters descend below the baseline. The baseline is similar in concept to the lines on writing paper. These values define the basic character size and are used as scale factors for the height specified for the text object.
        ///</summary>
        public short? Below { get; set; } // Below

        ///<summary>
        /// The modes byte should be 0 for a horizontally oriented font and 2 for a dual-orientation (horizontal or vertical) font. The special 00E (14) command code is honored only when modes is set to 2.
        ///</summary>
        public byte? Modes { get; set; } // Modes

        ///<summary>
        /// Font encoding. Uses one of the following integer values.
        /// 0 Unicode
        /// 1 Packed multibyte 1
        /// 2 Shape file
        ///</summary>
        public byte? Encoding { get; set; } // Encoding

        ///<summary>
        /// Font embedding information. Specifies whether the font is licensed. Licensed fonts must not be modified or exchanged. Bitcoded values can be added.
        /// 0 Font can be embedded
        /// 1 Font cannot be embedded
        /// 2 Embedding is read-only
        ///</summary>
        public byte? Type { get; set; } // Type
        public bool IsKeyboard { get; set; } // IsKeyboard
        public bool IsMirror { get; set; } // IsMirror
        public bool IsBackward { get; set; } // IsBackward
        public string Source { get; set; } // Source (length: 250)
        public string Remarks { get; set; } // Remarks (length: 250)

        // Reverse navigation

        /// <summary>
        /// Child ShxFontDefs where [ShxFontDef].[ShxFontFileId] point to this entity (FK_ShxFontDef_ShxFontFiles)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<ShxFontDef> ShxFontDefs { get; set; } // ShxFontDef.FK_ShxFontDef_ShxFontFiles

        // Foreign keys

        /// <summary>
        /// Parent LoadDirectory pointed by [ShxFontFiles].([LoadDirectoryId]) (FK__ShxFontFi__LoadD__534D60F1)
        /// </summary>
        public virtual LoadDirectory LoadDirectory { get; set; } // FK__ShxFontFi__LoadD__534D60F1

        public ShxFontFile()
        {
            IsKeyboard = false;
            IsMirror = false;
            IsBackward = false;
            ShxFontDefs = new System.Collections.Generic.List<ShxFontDef>();
        }
    }

    #endregion

    #region POCO Configuration

    // LoadDirectory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public class LoadDirectoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LoadDirectory>
    {
        public LoadDirectoryConfiguration()
            : this("dbo")
        {
        }

        public LoadDirectoryConfiguration(string schema)
        {
            ToTable("LoadDirectory", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ComputerName).HasColumnName(@"ComputerName").HasColumnType("nvarchar").IsRequired().HasMaxLength(260);
            Property(x => x.FullPath).HasColumnName(@"FullPath").HasColumnType("nvarchar").IsRequired().HasMaxLength(260);
            Property(x => x.FirstScanDate).HasColumnName(@"FirstScanDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.LastScanDate).HasColumnName(@"LastScanDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.MyRowVersion).HasColumnName(@"MyRowVersion").HasColumnType("timestamp").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion();
        }
    }

    // ShxFontDef
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public class ShxFontDefConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ShxFontDef>
    {
        public ShxFontDefConfiguration()
            : this("dbo")
        {
        }

        public ShxFontDefConfiguration(string schema)
        {
            ToTable("ShxFontDef", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ShxFontFileId).HasColumnName(@"ShxFontFileId").HasColumnType("int").IsRequired();
            Property(x => x.ShapeNumber).HasColumnName(@"ShapeNumber").HasColumnType("int").IsRequired();
            Property(x => x.ShapeHex).HasColumnName(@"ShapeHex").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.DefBytes).HasColumnName(@"DefBytes").HasColumnType("smallint").IsRequired();
            Property(x => x.ShapeName).HasColumnName(@"ShapeName").HasColumnType("nvarchar").IsOptional().HasMaxLength(130);
            Property(x => x.ShapeLine).HasColumnName(@"ShapeLine").HasColumnType("smallint").IsRequired();

            // Foreign keys
            HasRequired(a => a.ShxFontFile).WithMany(b => b.ShxFontDefs).HasForeignKey(c => c.ShxFontFileId); // FK_ShxFontDef_ShxFontFiles
        }
    }

    // ShxFontFiles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.5.0")]
    public class ShxFontFileConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ShxFontFile>
    {
        public ShxFontFileConfiguration()
            : this("dbo")
        {
        }

        public ShxFontFileConfiguration(string schema)
        {
            ToTable("ShxFontFiles", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LoadDirectoryId).HasColumnName(@"LoadDirectoryId").HasColumnType("int").IsRequired();
            Property(x => x.ShxFileName).HasColumnName(@"ShxFileName").HasColumnType("nvarchar").IsRequired().HasMaxLength(260);
            Property(x => x.ShxFileSize).HasColumnName(@"ShxFileSize").HasColumnType("int").IsRequired();
            Property(x => x.ShxFileDate).HasColumnName(@"ShxFileDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.Crc32).HasColumnName(@"Crc32").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);
            Property(x => x.ShxType).HasColumnName(@"ShxType").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.FontName).HasColumnName(@"FontName").HasColumnType("nvarchar").IsOptional().HasMaxLength(130);
            Property(x => x.HeaderRemarks).HasColumnName(@"HeaderRemarks").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.HeaderBigFont).HasColumnName(@"HeaderBigFont").HasColumnType("nvarchar").IsOptional().HasMaxLength(130);
            Property(x => x.HeaderLine1).HasColumnName(@"HeaderLine1").HasColumnType("nvarchar").IsOptional().HasMaxLength(130);
            Property(x => x.HeaderLine2).HasColumnName(@"HeaderLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(130);
            Property(x => x.Above).HasColumnName(@"Above").HasColumnType("smallint").IsOptional();
            Property(x => x.Below).HasColumnName(@"Below").HasColumnType("smallint").IsOptional();
            Property(x => x.Modes).HasColumnName(@"Modes").HasColumnType("tinyint").IsOptional();
            Property(x => x.Encoding).HasColumnName(@"Encoding").HasColumnType("tinyint").IsOptional();
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("tinyint").IsOptional();
            Property(x => x.IsKeyboard).HasColumnName(@"IsKeyboard").HasColumnType("bit").IsRequired();
            Property(x => x.IsMirror).HasColumnName(@"IsMirror").HasColumnType("bit").IsRequired();
            Property(x => x.IsBackward).HasColumnName(@"IsBackward").HasColumnType("bit").IsRequired();
            Property(x => x.Source).HasColumnName(@"Source").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);
            Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar").IsOptional().HasMaxLength(250);

            // Foreign keys
            HasRequired(a => a.LoadDirectory).WithMany(b => b.ShxFontFiles).HasForeignKey(c => c.LoadDirectoryId); // FK__ShxFontFi__LoadD__534D60F1
        }
    }

    #endregion

}
// </auto-generated>

